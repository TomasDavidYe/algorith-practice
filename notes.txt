in each case assume n = number of elements in the input array

Bubble-Sort
Description = we find let the minimum bubble its way through the array to the begining of the list.
We repeat this process on the remaining array not counting the already found minimums.
Complexity = O(n^2)
Pros = Simple and easy to write into code
Cons = time complexity is high

Select-Sort
Description = we start with an unsorted array and create an empty list. We find the minimum
of the list, remove it from the array and put it in the beginning of the new list.
We repeat the process on the sublist formed by removing the least element, extracting the
next minimum and placing it in the new list
Complexity = O(n^2)
Pros = intuitive, simple and easy to write, in most cases better than bubble sort, in some cases better than the fancier algorithms
like quick-sort and merge-sort
Cons = worst case time complexity is high and is slow on big inputs compared to heap-sort, merge-sort

Insert-Sort
description = We build the list from behind, taking each element and inserting it into its position in the already sorted sublist
Complexity = O(n^2)
Pros = simple implementation, in most cases faster than bubble-sort and select-sort
Cons = on large datasets it is vastly outperformed by merge-sort, heap-sort, quick-sort

These three algorithms are easy to understand but are noticeable slower than the following three algorithms

Quick-Sort
Description = we pick a random element, pivot, and divide the input array into three smaller arrays.
First array is of elements smaller than pivot, Than array full of elements equal to pivot and finally the
elements greater than pivot. We call recursively the method on the lesser and greater arrays and
return [sorted(lesserArray), equalArray, sorted(greaterArray)]
Complexity = O(n*logn) (avarage time complexity, assuming we can find median linearly)
Pros = fast, when implemented well, it can be two/thre times faster than heapsort or mergesort
Cons = harder to implement from basic data structures, worst case scenario has complexity O(n^2), however, this occasion is rare

Heap-Sort
Description = we can think of it as an improved select-sort but instead of going through the whole array,
heap-sort is able to extract the next minimum in logarithmic time using a data structure called Heap.
In the begining, we build a max-heap, and then in each iteration we extract the maximum, and rebuild it.
Each iteration takes O(log(n)) time
Complexity = O(n*log(n)) (worst case scenario)
Pros = fast and sorting takes place within the array;
Cons = harder to implement, knowledge of heap is needed;

